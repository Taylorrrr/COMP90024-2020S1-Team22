<speak>
  The application can be separated to three module, harvester workers, backend, and frontend. With the benefit of modularity, different modules can be developed simultaneously and communicate to each other through specified API without knowing other secret parts. The application is big-data ready which can be easily scaled up to meet further challenge. <break time="2000ms"/>
  Fast-forwarded Ansible automated deployment. <break time="2000ms"/>
  Manually connect into the instance and check the running logs for the harvesters. <break time="2000ms"/>
  Let’s look at our CouchDB, this is the admin page. <break time="2000ms"/>
  Here are the nodes in the database cluster. <break time="2000ms"/>
  We collect more than 4 million geo-location enabled tweets from 14 million twitter users. <break time="2000ms"/>
  Tweets is a partitioned database. <break time="2000ms"/>
  The partition key is the user ID, we can observe that the fields ID are separated by colon. <break time="2000ms"/>
  Let’s have a look at the document. <break time="2000ms"/>
  Every entry has text, hashtags, geo location and classified zone. <break time="2000ms"/>
  Here are our design documents. They are map-reduce functions and list functions. <break time="2000ms"/>
  For example, we have views that are aggregated by S A code and time. <break time="2000ms"/>
  Select group level as 2. <break time="2000ms"/>
  We can retrieve the S A3 aggregated data for all tweets. <break time="2000ms"/>
  The views for language is similar to previous one. <break time="2000ms"/>
  Select group level as 3. <break time="2000ms"/>
  Then the data are aggregated with S A2, we can get the statistics about language distribution. <break time="2000ms"/>
  Count of hashtags is also supported. The view is sorted alphabetically by hashtags. <break time="2000ms"/>
  Let’s go to the user database. <break time="2000ms"/>
  It is not a partitioned database. <break time="2000ms"/>
  Let’s have a closer look how the data is stored. The level field denote the priority in the BFS search tree. <break time="2000ms"/>
  Let’s look at the views in the user database. <break time="2000ms"/>
  The views are quite simple comparing with those in tweet database. <break time="2000ms"/>
  The users that have been expanded and the number of users in the queue. <break time="2000ms"/>
  Similar for the searched view. <break time="2000ms"/>
  Then let’s switch to swagger. <break time="2000ms"/>
  Here is our team title. <break time="2000ms"/>
  This is our overview for database, task queue, data analysis and data persistence. <break time="2000ms"/>
  Let’s first try out the database monitor. <break time="2000ms"/>
  We can see the number of docs and user in the search queue. <break time="2000ms"/>
  For Task Queue API, we do not provided “try it out” for next expand and next search endpoints because it will corrupt our task queue. <break time="2000ms"/>
  Let’s see current queue status. <break time="2000ms"/>
  The status for two task queue. <break time="2000ms"/>
  In the data analysis API, please note that retrieve data at level 3 is relatively slow, so we just show the first one. <break time="2000ms"/>
  This are the counts aggregated at level S A4. <break time="2000ms"/>
  This one we can count tweets within different time period. <break time="2000ms"/>
  For example let’s try S A code 2 0 6 0 4 which is Melbourne City. <break time="2000ms"/>
  and set the parameter "detail" to True. <break time="2000ms"/>
  Then execute. <break time="2000ms"/>
  All Data from S A2 level is shown. <break time="2000ms"/>
  If we need the data aggregated with level S A3, we can set detail section to false. <break time="2000ms"/>
  Let’s try for different time interval. <break time="2000ms"/>
  Then the result changed. <break time="2000ms"/>
  For language statistic, we also select level 1 for demonstration. <break time="2000ms"/>
  we have the statistics for language distribution among different areas. <break time="2000ms"/>
  This endpoint is similar to the previous one, we can specify the start and end time additionally. <break time="2000ms"/>
  Change parameter detail to False. <break time="2000ms"/>
  Here is the endpoint for hashtag counting. <break time="2000ms"/>
  Here is an example for "Sydney". <break time="2000ms"/>
  and this query is case insensitive. <break time="2000ms"/>
  Try some other hashtags. <break time="2000ms"/>
  Finally, let’s have a look at the data persistence API. <break time="2000ms"/>
  If we enter ID that does not exist, it will show error 4 0 4. <break time="2000ms"/>
  you can see “ERROR: NOT FOUND”. <break time="2000ms"/>
  Due to the consideration about security for our application, we do not provide ”try it out” for POST, PUT and DELETE. <break time="2000ms"/>
  Let’s try another Get method, we can observe that the returned value is in same format as what we did in querying the database directly. <break time="2000ms"/>
</speak>